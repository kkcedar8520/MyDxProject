struct VS_OUT
{
	float4 p : SV_POSITION;
	float4 c : COLOR0;
	float2 t : TEXCOORD0;
	float time : TEXCOORD1;
};
struct VS_IN
{
	float3 p : POSITION;
	float4 c : COLOR;
	float2 t : TEX;
};
struct VS_OUT_LINE
{
	float4 p : SV_POSITION;
	float4 c : COLOR0;
};
struct VS_IN_LINE
{
	float3 p : aaaa;
	float4 c : bbbb;
};
cbuffer cb_Data : register(b0)
{
	float4x4 g_matWorld : packoffset(c0);
	float4x4 g_matView : packoffset(c4);
	float4x4 g_matProj : packoffset(c8);
	float4 time : packoffset(c12);	
};

VS_OUT VS(VS_IN inData)
{
	VS_OUT vOut;
	float4 vLocal = float4(inData.p,1.0f);
	float4 vWorld = mul(vLocal, g_matWorld);
	float4 vView = mul(vWorld, g_matView);
	float4 vProj = mul(vView, g_matProj);
	vOut.p = vProj;
	vOut.c = inData.c;
	vOut.t = inData.t;
	vOut.time = cos(time.x)*0.5f + 0.5f;
	return vOut;
}
VS_OUT_LINE VSLine(VS_IN_LINE inData)
{
	VS_OUT_LINE vOut;
	float4 vLocal = float4(inData.p,1.0f);
	float4 vWorld = mul(vLocal, g_matWorld);
	float4 vView = mul(vWorld, g_matView);
	float4 vProj = mul(vView, g_matProj);
	vOut.p = vProj;
	vOut.c = inData.c;
	return vOut;
}
float4 XXXX( float4 p : POSITION) : SV_POSITION
{
	float4 vOut = 0;
	vOut.x = (p.x / 800.0f) * 2.0f - 1.0f;
	vOut.y = ((p.y / 600.0f) * 2.0f - 1.0f)*-1.0f;
	vOut.z = p.z;
	vOut.w = 1.0f;
	return vOut;
}

Texture2D		g_txDiffuseA : register(t0);
Texture2D		g_txDiffuseB : register(t1);
SamplerState	g_Sample0 : register(s0);

struct PS_IN
{
	float4 p : SV_POSITION;
	float4 c : COLOR0;
	float2 t : TEXCOORD0;
	float time:TEXCOORD1;
};
struct PS_IN_LINE
{
	float4 p : SV_POSITION;
	float4 c : COLOR0;
};
struct PS_OUT
{
	float4 c : SV_TARGET;
};
PS_OUT PS(PS_IN inData)
{
	PS_OUT vOut;
	float4 vFinal = g_txDiffuseA.Sample(g_Sample0, inData.t);	
	vOut.c = vFinal * inData.c;
	return vOut;
}
float4 PSLine(PS_IN_LINE inData) : SV_TARGET
{
	return inData.c;
}
PS_OUT PSBlend(PS_IN inData)
{
	PS_OUT vOut;
	float4 SRC = g_txDiffuseA.Sample(g_Sample0, inData.t);
	if (SRC.a < 0.5f)
	{
		discard;
	}
	//float4 DESK = g_txDiffuseB.Sample(g_Sample0, inData.t);
	//vOut.c = SRC * SRC.a + DESK * (1.0f- SRC.a);
	vOut.c = SRC;
	//vOut.c.a = 1.0f;// (1.0f - DESK.g) *inData.time;
	return vOut;
}